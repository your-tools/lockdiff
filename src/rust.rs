use anyhow::Result;
use serde::Deserialize;

use crate::Package;

#[derive(Deserialize, Debug)]
struct CargoLock {
    #[serde(rename = "package")]
    packages: Vec<CargoPackage>,
}

impl CargoLock {
    fn packages(self) -> Vec<Package> {
        self.packages.into_iter().map(|p| p.into()).collect()
    }
}

#[derive(Deserialize, Debug)]
struct CargoPackage {
    name: String,
    version: String,
}

impl From<CargoPackage> for Package {
    fn from(cargo_package: CargoPackage) -> Self {
        Package::new(&cargo_package.name, &cargo_package.version)
    }
}

pub(crate) fn parse_cargo_lock(contents: &str) -> Result<Vec<Package>> {
    let cargo_lock: CargoLock = toml::from_str(contents)?;
    Ok(cargo_lock.packages())
}

#[cfg(test)]
mod tests {

    use super::*;

    #[test]
    fn test_parse_cargo() {
        let contents = r#"
# This file is automatically @generated by Cargo.
version = 3

[[package]]
name = "anyhow"
version = "1.0.58"
source = "registry+https://github.com/rust-lang/crates.io-index"

[[package]]
name = "lockdiff"
version = "1.0.0"
dependencies = [
 "anyhow",
]"#;
        let packages = parse_cargo_lock(contents).unwrap();
        assert_eq!(
            &packages,
            &[
                Package::new("anyhow", "1.0.58"),
                Package::new("lockdiff", "1.0.0")
            ]
        );
    }
}
