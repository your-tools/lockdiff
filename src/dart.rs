use std::collections::BTreeMap;

use crate::Package;
use anyhow::Result;
use serde::Deserialize;

#[derive(Deserialize, Debug)]
struct PubSpecLock {
    packages: BTreeMap<String, PubPackage>,
}

impl PubSpecLock {
    fn packages(self) -> Vec<Package> {
        self.packages
            .into_iter()
            .map(|(key, value)| Package::new(&key, &value.version))
            .collect()
    }
}

#[derive(Deserialize, Debug)]
struct PubPackage {
    // Note: no `name` here, because the package names are the keys in the BTreeMap
    version: String,
}

pub(crate) fn parse_pubspec_lock(contents: &str) -> Result<Vec<Package>> {
    let pub_spec_lock: PubSpecLock = serde_yml::from_str(contents)?;
    Ok(pub_spec_lock.packages())
}

#[cfg(test)]
mod tests {

    use super::*;

    #[test]
    fn test_parse_pubspec_lock() {
        let contents = r#"
# Generated by pub
# See https://dart.dev/tools/pub/glossary#lockfile
packages:
  _macros:
    dependency: transitive
    description: dart
    source: sdk
    version: "0.3.3"
  analyzer:
    dependency: transitive
    description:
      name: analyzer
      sha256: c9040fc56483c22a5e04a9f6a251313118b1a3c42423770623128fa484115643
      url: "https://pub.dev"
    source: hosted
    version: "7.2.0"
  args:
    dependency: transitive
    description:
      name: args
      sha256: bf9f5caeea8d8fe6721a9c358dd8a5c1947b27f1cfaa18b39c301273594919e6
      url: "https://pub.dev"
    source: hosted
    version: "2.6.0"
"#;
        let packages = parse_pubspec_lock(contents).unwrap();
        assert_eq!(
            packages,
            &[
                Package::new("_macros", "0.3.3"),
                Package::new("analyzer", "7.2.0"),
                Package::new("args", "2.6.0")
            ]
        );
    }
}
