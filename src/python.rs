use crate::Package;
use anyhow::{bail, Result};
use serde::Deserialize;

#[derive(Deserialize, Debug)]
struct PoetryLock {
    #[serde(rename = "package")]
    packages: Vec<Package>,
}

impl PoetryLock {
    fn packages(self) -> Vec<Package> {
        self.packages
            .into_iter()
            .map(|p| Package::new(&p.name, &p.version))
            .collect()
    }
}

pub(crate) fn parse_poetry_lock(contents: &str) -> Result<Vec<Package>> {
    let lock: PoetryLock = toml::from_str(contents)?;
    Ok(lock.packages())
}

pub(crate) fn parse_requirements_txt(contents: &str) -> Result<Vec<Package>> {
    let mut packages = vec![];
    for line in contents.lines() {
        let line = line.trim();
        let line = line.trim_end_matches('\\');
        if line.is_empty() {
            continue;
        }
        if line.trim_start().starts_with('#') {
            continue;
        }
        if line.starts_with("--") {
            continue;
        }
        let split: Vec<_> = line.split("==").collect();
        if split.len() != 2 {
            bail!("Expected <package>==<version> in '{line}'");
        }
        let name = &split[0].trim();
        let version = &split[1].trim();
        let package = Package::new(name, version);
        packages.push(package);
    }
    Ok(packages)
}

#[cfg(test)]
mod tests {

    use super::*;

    #[test]
    fn test_parse_simple_requirements_txt() {
        let contents = r#"
# This file is autogenerated by pip-compile with Python 3.10
# by the following command:
#
#    pip-compile --output-file=requirements.txt pyproject.toml
#
asgiref==3.6.0
    # via django
django==4.1.7
    # via my-cool-django-app (pyproject.toml)
"#;

        let packages = parse_requirements_txt(contents).unwrap();
        assert_eq!(
            &packages,
            &[
                Package::new("asgiref", "3.6.0"),
                Package::new("django", "4.1.7")
            ]
        );
    }

    #[test]
    fn test_parse_requirements_txt_with_hashes() {
        let contents = r#"
# This file is autogenerated by pip-compile with Python 3.10
# by the following command:
#
#    pip-compile --output-file=requirements.txt pyproject.toml
#
asgiref==3.6.0 \
    --hash=sha256:71e68008da809b957b7ee4b43dbccff33d1b23519fb8344e33f049897077afac \
    --hash=sha256:9567dfe7bd8d3c8c892227827c41cce860b368104c3431da67a0c5a65a949506

    # via django
django==4.1.7
    --hash=sha256:9567dfe7bd8d3c8c892227827c41cce860b368104c3431da67a0c5a65a949506
    --hash=sha256:f2f431e75adc40039ace496ad3b9f17227022e8b11566f4b363da44c7e44761e
    # via -r requirements.in
"#;

        let packages = parse_requirements_txt(contents).unwrap();
        assert_eq!(
            &packages,
            &[
                Package::new("asgiref", "3.6.0"),
                Package::new("django", "4.1.7")
            ]
        );
    }

    #[test]
    fn test_parse_poetry_lock() {
        let contents = r#"
# This file is automatically @generated by Poetry 2.0.1 and should not be changed by hand.

[[package]]
name = "anyio"
version = "4.8.0"
description = "High level compatibility layer for multiple asynchronous event loop implementations"
files = [
]

[package.dependencies]
idna = ">=2.8"

[package.extras]
doc = ["Sphinx (>=7.4,<8.0)", "packaging", "sphinx-autodoc-typehints (>=1.2.0)", "sphinx_rtd_theme"]

[[package]]
name = "asgiref"
version = "3.8.1"

[metadata]
lock-version = "2.1"
python-versions = ">= 3.13"
"#;
        let packages = parse_poetry_lock(contents).unwrap();
        assert_eq!(
            &packages,
            &[
                Package::new("anyio", "4.8.0"),
                Package::new("asgiref", "3.8.1")
            ]
        );
    }
}
